package info.benjaminhill.wbb

import com.google.gson.Gson
import io.jsonwebtoken.Jwts
import io.jsonwebtoken.SignatureAlgorithm
import mu.KotlinLogging
import org.eclipse.paho.client.mqttv3.*
import org.eclipse.paho.client.mqttv3.MqttException.REASON_CODE_CONNECTION_LOST
import org.eclipse.paho.client.mqttv3.MqttException.REASON_CODE_SERVER_CONNECT_ERROR
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence
import org.joda.time.DateTime
import java.security.KeyFactory
import java.security.spec.PKCS8EncodedKeySpec

/**
 * https://console.cloud.google.com/iot/locations/us-central1/registries/wbb-registry/devices/ev3?project=whiteboardbot
 *
private val mqtt = MQTT().also {
LOG.debug { "Conning MQTT" }
it.connect()

LOG.debug { "Launching 60 second telemetry" }
launch {
while (job.isActive) {
val (x, y) = plotter.location
it.sendTelemetry(mapOf(
"voltage" to Battery.getVoltageMilliVolt(),
"x" to x,
"y" to y,
"spool0" to plotter.spool0.length,
"spool1" to plotter.spool1.length
))
delay(60 * 1_000)
}
}
}
 */
class MQTT : AutoCloseable {

    private lateinit var client: MqttClient

    fun connect() {
        LOG.debug { "MQTT:init:start" }

        client = connectWithExponentialRetry(MqttClient("ssl://$BRIDGE_HOST_NAME:$BRIDGE_PORT",
                CLIENT_ID,
                /*Ok if lost on reboot*/ MemoryPersistence()))

        client.setCallback(object : MqttCallback {
            override fun messageArrived(topic: String?, message: MqttMessage?) {
                LOG.info { "messageArrived topic:$topic, message:${message?.payload?.toString()}" }
                // TODO: JSON parsing
            }

            override fun connectionLost(e: Throwable?) = LOG.error { "connectionLost: $e" }
            override fun deliveryComplete(token: IMqttDeliveryToken?) = LOG.debug { "deliveryComplete token:$token" }
        })

        if (client.isConnected) {
            client.subscribe(TOPIC)
            LOG.debug { "Subscribing success." }
        } else {
            LOG.warn { "MQTT Client was unable to connect, skipped send and receive" }
        }

        LOG.debug { "MQTT:init:end" }
    }

    fun sendTelemetry(data: Map<String, Any>) {
        if (!client.isConnected) {
            LOG.info { "Not connected, so no sending telemetry" }
            return
        }
        // https://cloud.google.com/iot/docs/how-tos/commands#iot-core-send-command-nodejs
        // `gcloud iot devices describe $DEVICE_ID --project=$GCP_PROJECT_ID --region=$GCP_REGION  --registry=$REGISTRY_NAME`
        val message = MqttMessage(GSON.toJson(data)!!.toByteArray())
        message.qos = 1
        client.publish("/devices/$DEVICE_ID/events", message)
    }

    override fun close() {
        if (client.isConnected) {
            client.disconnect()
        }
        client.close()
    }

    companion object {
        private val LOG = KotlinLogging.logger {}

        // General Google Cloud
        const val BRIDGE_HOST_NAME = "mqtt.googleapis.com"
        const val BRIDGE_PORT = 8883

        // Project and device specific
        private const val GCP_PROJECT_ID = "whiteboardbot"
        private const val GCP_REGION = "us-central1"
        private const val REGISTRY_NAME = "wbb-registry"
        private const val DEVICE_ID = "ev3"

        // Combined strings
        private const val TOPIC = "/devices/$DEVICE_ID/commands/#"
        private const val CLIENT_ID = "projects/$GCP_PROJECT_ID/locations/$GCP_REGION/registries/$REGISTRY_NAME/devices/$DEVICE_ID"

        private val GSON = Gson()

        private fun connectWithExponentialRetry(client: MqttClient): MqttClient {
            // GCP Requirements
            val connectOptions = MqttConnectOptions()
            connectOptions.mqttVersion = MqttConnectOptions.MQTT_VERSION_3_1_1
            connectOptions.userName = "notused"
            connectOptions.password = createJwtRsa().toCharArray()

            exponentialRetryDelayMs().forEach { retryIntervalMs ->
                try {
                    client.connect(connectOptions)
                    return client
                } catch (e: MqttException) {
                    when (e.reasonCode) {
                        REASON_CODE_CONNECTION_LOST.toInt(),
                        REASON_CODE_SERVER_CONNECT_ERROR.toInt() -> {
                            Thread.sleep(retryIntervalMs)
                            LOG.debug { "Exponential backoff $retryIntervalMs" }
                        }
                        else -> {
                            LOG.warn { "Unknown MQTT connection issue (not retrying): $e" }
                            return client
                        }
                    }
                }
            }
            return client
        }

        private fun createJwtRsa(): String {
            val now = DateTime()
            // openssl pkcs8 -topk8 -nocrypt -in rsa_private.pem -outform der -out rsa_private.der
            val privateKey = javaClass.classLoader.getResource("rsa_private.der")!!.readBytes()
            val jwtBuilder = Jwts.builder()
                    .setIssuedAt(now.toDate())
                    .setExpiration(now.plusDays(1).toDate())
                    .setAudience("whiteboardbot")
            val spec = PKCS8EncodedKeySpec(privateKey)
            val kf = KeyFactory.getInstance("RSA")
            return jwtBuilder.signWith(SignatureAlgorithm.RS256, kf.generatePrivate(spec)).compact()
        }
    }
}




fun exponentialRetryDelayMs(): Sequence<Long> {
    return generateSequence(500L) { retryIntervalMs ->
        (retryIntervalMs * 1.5 + Random.nextInt(0, 1000)).toLong().takeIf { it < 60 * 1_000 }
    }
}

/** For when you need a temp ID for the duration of an app run */
val sessionId by lazy {
    "23456789abcdefghijkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ".toList().shuffled().take(4).joinToString()
}